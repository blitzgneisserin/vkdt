#version 460
#extension GL_GOOGLE_include_directive    : enable
#extension GL_EXT_nonuniform_qualifier    : enable

#include "shared.glsl"

layout(local_size_x = DT_LOCAL_SIZE_X, local_size_y = DT_LOCAL_SIZE_Y, local_size_z = 1) in;

layout(std140, set = 0, binding = 0) uniform global_t
{
  uint frame;
} global;

// global uniform stuff about image and roi
layout(std140, set = 0, binding = 1) uniform params_t
{
  int filters;
  float opacity;
  float black;
  float white;
  float noise_a;
  float noise_b;
  int boxclamp;
} params;

layout( // input back buffer
    set = 1, binding = 0
) uniform sampler2D img_in;

layout( // new top layer
    set = 1, binding = 1
) uniform sampler2D img_top;

layout( // mask (single channel)
    set = 1, binding = 2
) uniform sampler2D img_mask;

layout( // output
    set = 1, binding = 3
) uniform writeonly image2D img_out;

// return (mu, sigma2) of local x-trans environment
vec2 gauss_xtrans(ivec2 pos)
{
  // rgb from pattern:
  bool blue_top = ((pos.x/3 + pos.y/3) & 1) > 0;
  pos = (pos/3)*3; // start of block pattern

  float mom1 = 0.0f, mom2 = 0.0f;
#define ADD(x, y)\
  {\
    float g = texelFetch(img_top, pos + ivec2(x, y), 0).r;\
    mom1 += g;\
    mom2 += g * g;\
  }
  ADD(0,0)
  ADD(2,0)
  ADD(1,1)
  ADD(0,2)
  ADD(2,2)
#undef ADD
  mom1 /= 5.0;
  mom2 /= 5.0;

  return vec2(mom1, max(0, mom2 - mom2*mom1));
}

void
main()
{
  ivec2 ipos = ivec2(gl_GlobalInvocationID);
  if(any(greaterThanEqual(ipos, imageSize(img_out)))) return;

  vec3 bck   = texelFetch(img_in,   ipos, 0).rgb;
  vec3 rgb   = texelFetch(img_top,  ipos, 0).rgb;
  float mask = texture(img_mask, (ipos+0.5)/vec2(imageSize(img_out))).r;
  // float mask = sample_semisoft(img_mask, (ipos+0.5)/vec2(imageSize(img_out))).r;
  // float mask = sample_soft(img_mask, (ipos+0.5)/vec2(imageSize(img_out))).r;
  float t = clamp(params.opacity*(1.0-mask), 0, 1);

  if(params.filters == 1)
  { // actually does not have a mosaic/bayer pattern and is no multi-frame
    rgb = mix(rgb, bck, t);
  }
  else if(params.filters == 0)
  {
    if(params.boxclamp == 1)
    {
      // this is for the TAA application in the himalaya scene.
      // use TAA style box clamping
      // estimate variance from spatial neighbours.
      // this works best for real time anti aliasing, since it will increase
      // the threshold near edges and thus blur more there. for photography,
      // arguably we want the opposite behaviour.
      vec3 mom1 = vec3(0.0f);
      vec3 mom2 = vec3(0.0f);
      const int r = 1;
      for(int yy = -r; yy <= r; yy++) {
        for(int xx = -r; xx <= r; xx++) {
          vec3 c = texelFetch(img_top, ipos + ivec2(xx, yy), 0).rgb;
          mom1 += c;
          mom2 += c * c;
        }
      }
      mom1 /= (2.0 * r + 1) * (2.0 * r + 1);
      mom2 /= (2.0 * r + 1) * (2.0 * r + 1);

      vec3 sigma = sqrt(max(vec3(0), mom2 - mom1 * mom1));
      const float thresh = 1.0;
      bck = clamp(bck, max(vec3(0), mom1 - thresh * sigma), mom1 + thresh * sigma);
      t = clamp(params.opacity*mask, 0, 1);
    }
    if(global.frame > 0) rgb = mix(rgb, bck, t);
  }
  else
  { // photography version.
    // too high values (allow too much input) gives weird colour cast
    float sigma2 = params.noise_a + 65535.0*max(0, rgb.r - params.black)*params.noise_b;
    // increase for flat areas:
    vec2 dist = vec2(1.0);
    if(params.filters == 9)
      dist = gauss_xtrans(ipos); // how flat is the area we're looking at?
    // detect flat by comparing sigma2 (noise model) and dist.y (local surroundings)
    float f = 10*clamp(sigma2 / dist.y, 1.0, 4.0);
    sigma2 *= f;
    t *= clamp(exp(-0.5*(rgb.r - bck.r)*(rgb.r - bck.r) / sigma2), 0, 1);

    rgb = mix(rgb, bck, t);
  }

  imageStore(img_out, ipos, vec4(rgb, 1));
}

